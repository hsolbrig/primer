digraph structs {
	graph [rankdir = "TB"];
	node [shape=record];
	schema [label="<schema> schema:|{<prefixes> prefixes?|{[PREFIX→|IRI]}}|{<valueExprDefns> valueExprDefns?|{<shapeLabel> [shapeLabel→|<valueExprDefn> valueExprDefn]}}|{<startActs> startActs?|<semAct> [semact]}|{<start> start?|<shapeLabel> shapeLabel}|{<shapes> shapes?|{<shapeLabel> [shapeLabel→|<shape> shape]}}}"];
	shape [label="<shape> shape:|{<virtual> virtual?|<BOOL> BOOL}|{<closed> closed?|<BOOL> BOOL}|{<extra> extra?|<IRI> [IRI]}|{<expression> expression?|<shapeExpr> shapeExpr}|{<inherit> inherit?|<shapeLabel> [shapeLabel]}|{<semActs> semActs?|<semAct> [semAct]}"];

 	subgraph cluster_shapeExpr {
		graph [label="", style=filled, fillcolor=gray80];
		shapeExpr [shape=none];
		eachOf [label="{{<eachOf> eachOf|{<expressions> expressions|<shapeExpr> [shapeExpr]}|{<min> min?|<INTEGER> INTEGER}|{<max> max?|<INTEGER> INTEGER\|\"*\"}|{<semActs> semActs?|<semAct> [semAct]}|{<annotations> annotations?|<annotation> [annotation]}}}", style=filled, fillcolor=white];
		someOf [label="{{<someOf> someOf|{<expressions> expressions|<shapeExpr> [shapeExpr]}|{<min> min?|<INTEGER> INTEGER}|{<max> max?|<INTEGER> INTEGER\|\"*\"}|{<semActs> semActs?|<semAct> [semAct]}|{<annotations> annotations?|<annotation> [annotation]}}}", style=filled, fillcolor=white];
		inclusion [label="{{<inclusion> inclusion|{<include> include|<shapeLabel> shapeLabel}}}", style=filled, fillcolor=white];
		tripleConstraint [label="{{<tripleConstraint> tripleConstraint|{<negated> negated?|<BOOL> BOOL}|{<valueExprs> valueExpr|<valueExpr> [valueExpr]}|{<min> min?|<INTEGER> INTEGER}|{<max> max?|<INTEGER> INTEGER\|\"*\"}|{<semActs> semActs?|<semAct> [semAct]}|{<annotations> annotations?|<annotation> [annotation]}}}", style=filled, fillcolor=white];
		shapeExpr -> eachOf -> someOf -> inclusion -> tripleConstraint [color=invis];
		
	}

 	subgraph cluster_valueExpr {
		graph [label="", style=filled, fillcolor=gray80];
		valueExpr [shape=none];
 		subgraph cluster_valueClassOrRef {
			graph [label="", style=filled, fillcolor=gray70];
			valueClassOrRef [shape=none];
			valueClass [label="valueClass|{{{<nodeKind> nodeKind|{<literal> \"literal\"}}|{...*|{<xsFacet> xsFacet}}| }|{{<nodeKind> nodeKind|{<literal> \"iri\"\|\"bnode\"\|\"nonliteral\"}}|{reference?|{<shapeLabel> shapeLabel}}|{...*|{<stringFacet> stringFacet}}}|{{<datatype> datatype|{<IRI> IRI}}|{...*|{<xsFacet> xsFacet}}| }|{{reference?|{<shapeLabel> shapeLabel}}|{...*|{<stringFacet> stringFacet}}| }|{{values|{<valueSetValue> [valueSetValue]}}| }|{{#empty      |#valueClass}}}", style=filled, fillcolor=white];
			vcref [label="{{<vcref> vcref|{<valueExprRef> valueExprRef|<shapeLabel> shapeLabel}}}", style=filled, fillcolor=white];
			valueClassOrRef -> vcref -> valueClass [color=invis];
		}
		vcor [label="{{<vcor> vcor|{<valueExprs> valueExprs|<valueClassOrRef> valueClassOrRef}}}", style=filled, fillcolor=white];
		vcand [label="{{<vcand> vcand|{<valueExprs> valueExprs|<valueClassOrRef> valueClassOrRef}}}", style=filled, fillcolor=white];
		valueExpr -> vcor -> vcand -> vcref -> valueClass [color=invis];
		
	}

	valueExprDefn [label="<valueExprDefn> valueExprDefn:|{<l_valueExpr> valueExpr|<valueExpr> [valueExpr]}|{<semActs> semActs?|<semAct> [semAct]}|{<annotations> annotations?|<annotation> [annotation]}"];

	schema:schema -> shape:shape -> valueExprDefn ->shapeExpr [color=invis];

	shape:shapeExpr  -> shapeExpr;
	eachOf:shapeExpr -> shapeExpr;
	someOf:shapeExpr -> shapeExpr;
	schema:shape -> shape:shape;

	schema:valueExprDefn -> valueExprDefn;
	valueExprDefn:valueExpr -> valueExpr;
	tripleConstraint:valueExpr -> valueExpr;
	vcor:valueClassOrRef -> valueClassOrRef;
	vcand:valueClassOrRef -> valueClassOrRef;


	pushSemActDown [shape = none,label="",width=0, height=0];
	semAct [label="<semAct> semAct|{<name> name|<IRI> IRI}|{<code> code|<STRING> STRING}", color=mediumvioletred];
	annotation [label="<annotation> annotation|{<predicate> predicate|<IRI> IRI}|{<object> object|<STRING> STRING\|IRI}", color=mediumvioletred];
	schema:shape -> pushSemActDown -> semAct:STRING -> annotation [color=invis];
	tripleConstraint:annotation -> pushSemActDown [color=invis];

	valueExprDefn:semAct -> semAct:semAct [color=mediumvioletred];
	schema:semAct -> semAct:semAct [color=mediumvioletred];
	shape:semAct  -> semAct:semAct [color=mediumvioletred];
	// eachOf:semAct  -> semAct:semAct [color=mediumvioletred]; // screws up layout
	// someOf:semAct  -> semAct:semAct [color=mediumvioletred];
	tripleConstraint:semAct -> semAct:semAct [color=mediumvioletred];

	valueExprDefn:annotation -> annotation:annotation [color=mediumvioletred];
	eachOf:annotation  -> annotation:annotation [color=mediumvioletred];
	someOf:annotation  -> annotation:annotation [color=mediumvioletred];
	tripleConstraint:annotation -> annotation:annotation [color=mediumvioletred];

	//{rank=same; valueClass:stringFacet pushSemActDown}
}
